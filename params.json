{"name":"hapi-mongoose-resource","tagline":"resourceful mongoose objects for the hapi framework","body":"# hapi-mongoose-resource api\r\n\r\n* [resource](#resource)\r\n* [router](#router)\r\n* [handler](#handler)\r\n\r\n\r\n## resource\r\n\r\na `resource` is an object that is used to generate routes and maintain handlers for a schema.\r\n\r\n### properties\r\n\r\n#### model\r\n\r\na model instance of a `mongoose.Schema` object passed to the constructor; the base of the resource.\r\n\r\n#### path\r\n\r\na string passed to the constructor that forms the base of the routes.\r\n\r\n#### router\r\n\r\nan object that builds the routes mapping paths and verbs to handler methods.\r\n\r\n#### handler\r\n\r\nan object that controls the database interactions for the given schema.\r\n\r\n#### options\r\n\r\nan object passed to the constructor that defines optional configuration parameters.\r\n\r\n### defaults\r\n\r\n#### resource_uri\r\n\r\n_this is not configurable - you cannot turn this off_\r\n\r\nfor every document returned, an additional property will be added to it with the key `resource_uri`.\r\n\r\nfor many cases, you will be directly calling the object by it's id; however, when looking up items, it's helpful for the document to contain a self-referring uri that can be easily parsed and used for absolute linking.\r\n\r\nfor example, if you have a `Widget` resource, and you called to `/widgets?weight:{\"$lt\":3}` via GET, you would receive something like this:\r\n\r\n```\r\n[\r\n  {\r\n    \"name\": \"Widget Alpha\",\r\n    \"weight\": 2.3,\r\n    \"_id\": \"whatever-widget-alpha\",\r\n    \"resource_uri\": \"/widgets/whatever-widget-alpha\"\r\n  },\r\n  {\r\n    \"name\": \"Widget Beta\",\r\n    \"weight\": 1.9,\r\n    \"_id\": \"whatever-widget-beta\",\r\n    \"resource_uri\": \"/widgets/whatever-widget-beta\"\r\n  },\r\n  {\r\n    \"name\": \"Widget Gamma\",\r\n    \"weight\": 2.8,\r\n    \"_id\": \"whatever-widget-gamma\",\r\n    \"resource_uri\": \"/widgets/whatever-widget-gamma\"\r\n  }\r\n]\r\n```\r\n\r\nthus making it easier for a front-end application to link directly to the resources.\r\n\r\n#### resource_key\r\n\r\n`_id` property of the schema. it's used to contract paths.\r\n\r\n### optional configuration options\r\n\r\n#### refs\r\n\r\nan object mapping schema properties to other resources.\r\n\r\nfor example, if you had the following schemas/models/resources:\r\n\r\n```\r\nmongoose = require 'mongoose'\r\nResource = require 'hapi-mongoose-resource'\r\n\r\nComponentSchema = new mongoose.Schema { name: String }\r\nComponent = mongoose.model 'Component', ComponentSchema\r\nComponentResource = new Resource Component, '/components'\r\n\r\nProductSchema = new mongoose.Schema { name: String, components: [{ type: mongoose.Schema.Types.ObjectId, ref: Component }]\r\nProduct = mongoose.model 'Product', ProductSchema\r\nProductResource = new Resource Product, '/products', { refs: { components: ComponentResource } }\r\n```\r\n\r\nand made a GET requests to `whatever.com/products`, your response objects would look like:\r\n\r\n```\r\n{\r\n  \"name\": \"Some Finished Product\",\r\n  \"components\": [\r\n    \"/components/<ObjectId>\",\r\n    \"/components/<ObjectId>\",\r\n    \"/components/<ObjectId>\",\r\n    \"/components/<ObjectId>\"\r\n  ]\r\n}\r\n```\r\n\r\nwhere `<ObjectId>` is replaced by the actual object ids of the components that were named when you created the product. this may not seem like much, but it could save a lot of work on front-end applications and minimize the chance of pushing broken links to related/referenced objects.\r\n\r\n\r\n## router\r\n\r\na `router` is an internal object of a `resource`. it is used to build routing paths for a hapi server instance.\r\n\r\n### properties\r\n\r\n#### routes\r\n\r\nan array of objects that meet the specs for hapi server routing.\r\n\r\n#### handler\r\n\r\nan instance of a `resource.handler` object passed to the constructor. it's methods are mapped to the paths.\r\n\r\n#### path\r\n\r\na string passed to the constructor. it is the base path used for routing.\r\n\r\n#### options\r\n\r\nan object passed to the constructor that defines optional configuration parameters.\r\n\r\n### defaults\r\n\r\n#### routes\r\n\r\nroutes by default map to the standard CRUD verbs: `GET`, `CREATE`, `UPDATE`, and `DELETE`. `GET` is special in the sense that it can fetch either a single resource or a collection of resources.\r\n\r\nthe other verbs must be called with an identifying parameter in their uri -- most typically the `_id` field of the model/document.\r\n\r\n\r\n## handler\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}